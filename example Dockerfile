# # === Builder stage ===
# FROM node:20-slim as builder
# WORKDIR /app

# ENV DATABASE_URL="postgresql://postgres:karadz@localhost:5432/drizzleSales"

# # Copy the source code and all files to the container (reminder: create a .dockerignore)
# COPY . .

# # Enable corepack for pnpm
# RUN corepack enable

# # Install all dependencies, but freeze lock-file if it already exists. 
# RUN if [ -f "pnpm-lock.yaml" ]; then pnpm i --frozen-lockfile; else pnpm i; fi

# # Fix potential security issues
# RUN pnpm audit --fix
    
# # Build app
# RUN pnpm build

# # === Deployment stage ===
# FROM builder as deploy
# WORKDIR /app

# # Copy dependency-lists from builder stage
# COPY --from=builder /app/package.json /app/pnpm-lock.yaml ./

# # Enable corepack for pnpm
# RUN corepack enable

# # Install dependencies, freeze lockfile, no devDependencies, no scripts
# RUN pnpm i --frozen-lockfile --prod --ignore-scripts

# # Fix potential security issues
# RUN pnpm audit --fix

# # Copy built app from builder stage to /app
# COPY --from=builder /app/build/ ./

# EXPOSE 5000
# CMD ["node", "./index.js"]


FROM node:20-slim AS base
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable
COPY . /app
WORKDIR /app

FROM base AS prod-deps
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile

FROM base AS build
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
RUN pnpm run build

FROM base
COPY --from=prod-deps /app/node_modules /app/node_modules
COPY --from=build /app/dist /app/dist
EXPOSE 8000
CMD [ "pnpm", "start" ]